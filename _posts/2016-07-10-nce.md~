---
layout: post
title: On understanding Noise Contrastive Estimation
date: 2016-07-10
excerpt: "Noise Contrastive Estimation explained"
tags: [machine learning, statistic, probability, estimator, nce]
---

### Why NCE?

So far, noise contrastive estimation technique (NCE[^1] - by Michael Gutmann[^2] and Aapo Hyvarinen) is my favorite technique for distribution estimation. I like NCE because it's one of the technique where you deal with the problem by not directly solve the problem - It's the best! 

[^1]: <http://www.jmlr.org/papers/v13/gutmann12a.html>
[^2]: <https://sites.google.com/site/michaelgutmann/home>

"Too long, didn't read" - No worries. NCE is simple as 1, 2, 3... 4, 5, 6, 7, 8, 9: 

  1. Knowing the distribution $$p_d(x)$$ of some data $$x$$ enables you to predict like a prophet.
  2. You create a model distribution that can be tuned by parameter $$\alpha$$: $$p_m(x;\alpha)$$. 
  3. The classic way to fit your model to the true distribution $$p_d(x)$$ is to maximize the likelihood of your model with a certain $$\alpha$$ and observed data $$\{x_1, ..., x_n\}$$ (MLE - maximum likelihood estimation, also log likelihood in practice). However, there are some problem here: 
    1. Your model $$p_m(x;\alpha)$$ must be a valid distribtion. That is: $$ \int p_m(\mbox{u};\alpha)\mbox{du}=1 $$. Think about it. Defining a flexible model parameterized by $$\alpha$$ and keeping it a valid distribution is not straight forward!
    2. In MLE, the desired MLE estimator is: 


  4. So, the clever thing to do

Syntax highlighting is a feature that displays source code, in different colors and fonts according to the category of terms. This feature facilitates writing in a structured language such as a programming language or a markup language as both structures and syntax errors are visually distinct. Highlighting does not affect the meaning of the text itself; it is intended only for human readers.[^1]


### Highlighted Code Blocks

To modify styling and highlight colors edit `/assets/css/syntax.css`.

{% highlight css %}
#container {
    float: left;
    margin: 0 -240px 0 0;
    width: 100%;
}
{% endhighlight %}

{% highlight html %}
{% raw %}
<nav class="pagination" role="navigation">
    {% if page.previous %}
        <a href="{{ site.url }}{{ page.previous.url }}" class="btn" title="{{ page.previous.title }}">Previous article</a>
    {% endif %}
    {% if page.next %}
        <a href="{{ site.url }}{{ page.next.url }}" class="btn" title="{{ page.next.title }}">Next article</a>
    {% endif %}
</nav><!-- /.pagination -->
{% endraw %}
{% endhighlight %}

{% highlight ruby %}
module Jekyll
  class TagIndex < Page
    def initialize(site, base, dir, tag)
      @site = site
      @base = base
      @dir = dir
      @name = 'index.html'
      self.process(@name)
      self.read_yaml(File.join(base, '_layouts'), 'tag_index.html')
      self.data['tag'] = tag
      tag_title_prefix = site.config['tag_title_prefix'] || 'Tagged: '
      tag_title_suffix = site.config['tag_title_suffix'] || '&#8211;'
      self.data['title'] = "#{tag_title_prefix}#{tag}"
      self.data['description'] = "An archive of posts tagged #{tag}."
    end
  end
end
{% endhighlight %}


### Standard Code Block

    {% raw %}
    <nav class="pagination" role="navigation">
        {% if page.previous %}
            <a href="{{ site.url }}{{ page.previous.url }}" class="btn" title="{{ page.previous.title }}">Previous article</a>
        {% endif %}
        {% if page.next %}
            <a href="{{ site.url }}{{ page.next.url }}" class="btn" title="{{ page.next.title }}">Next article</a>
        {% endif %}
    </nav><!-- /.pagination -->
    {% endraw %}


### Fenced Code Blocks

To modify styling and highlight colors edit `/assets/css/syntax.css`. Line numbers and a few other things can be modified in `_config.yml`. Consult [Jekyll's documentation](http://jekyllrb.com/docs/configuration/) for more information.

~~~ css
#container {
    float: left;
    margin: 0 -240px 0 0;
    width: 100%;
}
~~~

~~~ html
{% raw %}<nav class="pagination" role="navigation">
    {% if page.previous %}
        <a href="{{ site.url }}{{ page.previous.url }}" class="btn" title="{{ page.previous.title }}">Previous article</a>
    {% endif %}
    {% if page.next %}
        <a href="{{ site.url }}{{ page.next.url }}" class="btn" title="{{ page.next.title }}">Next article</a>
    {% endif %}
</nav><!-- /.pagination -->{% endraw %}
~~~

~~~ ruby
module Jekyll
  class TagIndex < Page
    def initialize(site, base, dir, tag)
      @site = site
      @base = base
      @dir = dir
      @name = 'index.html'
      self.process(@name)
      self.read_yaml(File.join(base, '_layouts'), 'tag_index.html')
      self.data['tag'] = tag
      tag_title_prefix = site.config['tag_title_prefix'] || 'Tagged: '
      tag_title_suffix = site.config['tag_title_suffix'] || '&#8211;'
      self.data['title'] = "#{tag_title_prefix}#{tag}"
      self.data['description'] = "An archive of posts tagged #{tag}."
    end
  end
end
~~~

### GitHub Gist Embed

An example of a Gist embed below.

{% gist mmistakes/6589546 %}
